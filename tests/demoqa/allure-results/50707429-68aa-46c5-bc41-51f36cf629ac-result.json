{"name": "Successful fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).set value: /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55e81212f013 <unknown>\n#1 0x55e811e91a08 <unknown>\n#2 0x55e811ec0dd6 <unknown>\n#3 0x55e811ee5932 <unknown>\n#4 0x55e811ebc6d3 <unknown>\n#5 0x55e811ee5a3e <unknown>\n#6 0x55e811ef8b94 <unknown>\n#7 0x55e811ee5823 <unknown>\n#8 0x55e811ebb08a <unknown>\n#9 0x55e811ebc1e5 <unknown>\n#10 0x55e81215ce5d <unknown>\n#11 0x55e812176061 <unknown>\n#12 0x55e81215ebb5 <unknown>\n#13 0x55e812176e08 <unknown>\n#14 0x55e8121522f0 <unknown>\n#15 0x55e812192988 <unknown>\n#16 0x55e812192b08 <unknown>\n#17 0x55e8121ac5dd <unknown>\n#18 0x7f85f6cad609 <unknown>", "trace": "self = <selene.core.wait.Wait object at 0x105e1aa70>\nfn = <selene.core.wait.Command object at 0x105e1b490>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n../../venv/lib/python3.10/site-packages/selene/core/wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.wait.Command object at 0x105e1b490>\nentity = <selene.core.entity.Element object at 0x105d8a650>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n../../venv/lib/python3.10/site-packages/selene/core/wait.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <selene.core.entity.Element object at 0x105d8a650>\n\n    def fn(element: Element):\n        webelement = (\n            element._actual_not_overlapped_webelement\n            if self.config.wait_for_no_overlap_found_by_js\n            else element()\n        )\n        webelement.clear()  # todo: change to impl based not on clear, because clear generates post-events...\n>       webelement.send_keys(str(value))\n\n../../venv/lib/python3.10/site-packages/selene/core/entity.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"1f883c521f2c5e9e597c70724fb6be8f\", element=\"8edadaf5-e505-4bad-8cfd-94dc0524e852\")>\nvalue = ('/Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png',)\nlocal_files = [None]\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(map(lambda keys_to_send:\n                                   self.parent.file_detector.is_local_file(str(keys_to_send)),\n                                   ''.join(map(str, value)).split('\\n')))\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = '\\n'.join(remote_files)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\n../../venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:600: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"1f883c521f2c5e9e597c70724fb6be8f\", element=\"8edadaf5-e505-4bad-8cfd-94dc0524e852\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '8edadaf5-e505-4bad-8cfd-94dc0524e852', 'sessionId': '1f883c521f2c5e9e597c70724fb6be8f', 'text': '/Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png', 'value': ['/', 'U', 's', 'e', 'r', 's', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n../../venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:773: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"1f883c521f2c5e9e597c70724fb6be8f\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': '8edadaf5-e505-4bad-8cfd-94dc0524e852', 'text': '/Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png', 'value': ['/', 'U', 's', 'e', 'r', 's', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1069bf340>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /Users/kl...\\\\n#16 0x55e812192b08 \\\\u003Cunknown>\\\\n#17 0x55e8121ac5dd \\\\u003Cunknown>\\\\n#18 0x7f85f6cad609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x55e81212f013 <unknown>\nE       #1 0x55e811e91a08 <unknown>\nE       #2 0x55e811ec0dd6 <unknown>\nE       #3 0x55e811ee5932 <unknown>\nE       #4 0x55e811ebc6d3 <unknown>\nE       #5 0x55e811ee5a3e <unknown>\nE       #6 0x55e811ef8b94 <unknown>\nE       #7 0x55e811ee5823 <unknown>\nE       #8 0x55e811ebb08a <unknown>\nE       #9 0x55e811ebc1e5 <unknown>\nE       #10 0x55e81215ce5d <unknown>\nE       #11 0x55e812176061 <unknown>\nE       #12 0x55e81215ebb5 <unknown>\nE       #13 0x55e812176e08 <unknown>\nE       #14 0x55e8121522f0 <unknown>\nE       #15 0x55e812192988 <unknown>\nE       #16 0x55e812192b08 <unknown>\nE       #17 0x55e8121ac5dd <unknown>\nE       #18 0x7f85f6cad609 <unknown>\n\n../../venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selene.core.entity.Browser object at 0x105dd5ba0>\n\n    @allure.title(\"Successful fill form\")\n    def test_successful(setup_browser):\n        browser = setup_browser\n    \n    \n        with allure.step(\"Open registrations form\"):\n            browser.open(\"https://demoqa.com/automation-practice-form\")\n            browser.element(\".practice-form-wrapper\").should(have.text(\"Student Registration Form\"))\n            browser.driver.execute_script(\"$('footer').remove()\")\n            browser.driver.execute_script(\"$('#fixedban').remove()\")\n    \n        with allure.step(\"Fill form\"):\n            # Имя, Фамилия, Имейл, Пол, номер телефона\n            browser.element('[id=firstName]').should(be.blank).type('Elena')\n            browser.element('[id=lastName]').should(be.blank).type('Pirogova')\n            browser.element('[id=userEmail]').should(be.blank).type('123@123.ru')\n            browser.element('[id^=gender-radio][value=Female]+label').click()\n            browser.element('[id=userNumber]').should(be.blank).type('8987654321')\n    \n            # дата рождения, год, месяц, день\n            browser.element('#dateOfBirthInput').click()\n            browser.element('select[class^=react-datepicker__year]').send_keys('1989')\n            browser.element('.react-datepicker__month-select').send_keys('January')\n            browser.element('[aria-label= \"Choose Monday, January 2nd, 1989\"]').click()\n    \n            # предметы, хобби, картинка, адрес\n            browser.element('#subjectsInput').send_keys('English')\n            browser.all('[id^=react-select][id*=option]').element_by(have.exact_text('English')).click()\n            browser.element('[id=\"hobbies-checkbox-2\"]+label').perform(command.js.scroll_into_view).click()\n>           browser.element('#uploadPicture').set_value(\n                os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'resources/image.png')))\n\ntest_registration_form.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../venv/lib/python3.10/site-packages/selene/core/entity.py:302: in set_value\n    self.wait.for_(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.wait.Wait object at 0x105e1aa70>\nfn = <selene.core.wait.Command object at 0x105e1b490>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 4s, while waiting for:\nE                       browser.element(('css selector', '#uploadPicture')).set value: /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\nE                       \nE                       Reason: InvalidArgumentException: Message: invalid argument: File not found : /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\nE                         (Session info: chrome=100.0.4896.60)\nE                       Stacktrace:\nE                       #0 0x55e81212f013 <unknown>\nE                       #1 0x55e811e91a08 <unknown>\nE                       #2 0x55e811ec0dd6 <unknown>\nE                       #3 0x55e811ee5932 <unknown>\nE                       #4 0x55e811ebc6d3 <unknown>\nE                       #5 0x55e811ee5a3e <unknown>\nE                       #6 0x55e811ef8b94 <unknown>\nE                       #7 0x55e811ee5823 <unknown>\nE                       #8 0x55e811ebb08a <unknown>\nE                       #9 0x55e811ebc1e5 <unknown>\nE                       #10 0x55e81215ce5d <unknown>\nE                       #11 0x55e812176061 <unknown>\nE                       #12 0x55e81215ebb5 <unknown>\nE                       #13 0x55e812176e08 <unknown>\nE                       #14 0x55e8121522f0 <unknown>\nE                       #15 0x55e812192988 <unknown>\nE                       #16 0x55e812192b08 <unknown>\nE                       #17 0x55e8121ac5dd <unknown>\nE                       #18 0x7f85f6cad609 <unknown>\n\n../../venv/lib/python3.10/site-packages/selene/core/wait.py:125: TimeoutException"}, "steps": [{"name": "Open registrations form", "status": "passed", "start": 1693766369761, "stop": 1693766372609}, {"name": "Fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).set value: /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : /Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/resources/image.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55e81212f013 <unknown>\n#1 0x55e811e91a08 <unknown>\n#2 0x55e811ec0dd6 <unknown>\n#3 0x55e811ee5932 <unknown>\n#4 0x55e811ebc6d3 <unknown>\n#5 0x55e811ee5a3e <unknown>\n#6 0x55e811ef8b94 <unknown>\n#7 0x55e811ee5823 <unknown>\n#8 0x55e811ebb08a <unknown>\n#9 0x55e811ebc1e5 <unknown>\n#10 0x55e81215ce5d <unknown>\n#11 0x55e812176061 <unknown>\n#12 0x55e81215ebb5 <unknown>\n#13 0x55e812176e08 <unknown>\n#14 0x55e8121522f0 <unknown>\n#15 0x55e812192988 <unknown>\n#16 0x55e812192b08 <unknown>\n#17 0x55e8121ac5dd <unknown>\n#18 0x7f85f6cad609 <unknown>\n\n\n", "trace": "  File \"/Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/tests/demoqa/test_registration_form.py\", line 34, in test_successful\n    browser.element('#uploadPicture').set_value(\n  File \"/Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/venv/lib/python3.10/site-packages/selene/core/entity.py\", line 302, in set_value\n    self.wait.for_(\n  File \"/Users/klim/Downloads/qa_guru_python_7_jenkins-demoqa/venv/lib/python3.10/site-packages/selene/core/wait.py\", line 125, in for_\n    raise self._hook_failure(failure)\n"}, "start": 1693766372609, "stop": 1693766382855}], "start": 1693766369761, "stop": 1693766382862, "uuid": "54280dcd-db9c-466e-8799-a150ba5c14b9", "historyId": "7125a56312df71a1fd62eda9b6f6c7a2", "testCaseId": "6fe5a9365b874ddd38dec6751b552478", "fullName": "tests.demoqa.test_registration_form#test_successful", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "MacBook-Pro-Klim.local"}, {"name": "thread", "value": "57953-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_registration_form"}]}